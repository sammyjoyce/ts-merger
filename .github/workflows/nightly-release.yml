name: Nightly Release

on:
  schedule:
    - cron: '0 0 * * *'  # Runs every day at 00:00 UTC
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'

permissions:
  contents: write
  packages: write
  actions: write

env:
  GITHUB_REPOSITORY: ${{ github.repository }}
  GITHUB_OWNER: ${{ github.repository_owner }}
  GITHUB_REPO: ${{ github.event.repository.name }}

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      nightly_version: ${{ steps.check.outputs.nightly_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for code changes and set version
        id: check
        shell: bash
        run: |
          # Get the latest nightly release tag
          LATEST_NIGHTLY=$(git tag -l "*-nightly.*" | sort -V | tail -n1 || echo "")
          
          if [ -z "$LATEST_NIGHTLY" ] || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # No previous nightly release exists or manual trigger
            echo "No previous nightly release found or manual trigger. Running release."
            SHOULD_RUN=true
          else
            # Check for changes in code files since last nightly
            CHANGES=$(git diff --name-only $LATEST_NIGHTLY...HEAD -- '*.zig' '*.ts' '*.js' '*.py' || echo "")
            
            if [ -n "$CHANGES" ]; then
              echo "Changes detected since last nightly release:"
              echo "$CHANGES"
              SHOULD_RUN=true
            else
              echo "No code changes since last nightly release."
              SHOULD_RUN=false
            fi
          fi

          echo "should_run=$SHOULD_RUN" >> $GITHUB_OUTPUT

          if [ "$SHOULD_RUN" = true ]; then
            # Get the latest version from build.zig.zon
            VERSION=$(grep '\.version = ' build.zig.zon | cut -d'"' -f2)
            TIMESTAMP=$(date -u +"%Y%m%d")
            NIGHTLY_VERSION="${VERSION}-nightly.${TIMESTAMP}"
            echo "nightly_version=${NIGHTLY_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "nightly_version=" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check_changes
    if: needs.check_changes.outputs.should_run == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-linux-gnu
            exe_name: fuze-linux-x64
          - os: macos-latest
            target: aarch64-macos
            exe_name: fuze-macos-arm64
          - os: windows-latest
            target: x86_64-windows-gnu
            exe_name: fuze-windows-x64
    outputs:
      # Only the first job's output will be captured; alternatively, manage version differently
      build_nightly_version: ${{ needs.check_changes.outputs.nightly_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Latest Version
        id: version
        shell: bash
        run: |
          echo "nightly_version=${{ needs.check_changes.outputs.nightly_version }}" >> $GITHUB_OUTPUT

      - name: Build Installation Scripts
        run: python3 .github/scripts/build_scripts.py
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Set Up Git Config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Set up Zig
        uses: mlugg/setup-zig@v1
        with:
          version: master

      - name: Verify Zig installation
        run: |
          zig version
          echo "Zig executable location:"
          which zig

      - name: Cache tree-sitter dependencies
        id: cache-tree-sitter-dependencies
        uses: actions/cache@v3
        with:
          path: deps/tree-sitter
          key: tree-sitter-${{ runner.os }}-${{ hashFiles('deps/tree-sitter/**') }}
          restore-keys: |
            tree-sitter-${{ runner.os }}-

      - name: Cache tree-sitter-typescript dependencies
        id: cache-tree-sitter-typescript-dependencies
        uses: actions/cache@v3
        with:
          path: deps/tree-sitter-typescript
          key: tree-sitter-typescript-${{ runner.os }}-${{ hashFiles('deps/tree-sitter-typescript/**') }}
          restore-keys: |
            tree-sitter-typescript-${{ runner.os }}-

      - name: Clone tree-sitter repositories
        if: steps.cache-tree-sitter-dependencies.outputs.cache-hit != 'true' || steps.cache-tree-sitter-typescript-dependencies.outputs.cache-hit != 'true'
        run: python3 .github/scripts/clone_repos.py

      - name: Run Tests
        run: zig build test

      - name: Build Release
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            EXEC_NAME="${{ matrix.exe_name }}.exe"
          else
            EXEC_NAME="${{ matrix.exe_name }}"
          fi
          zig build -Dtarget=${{ matrix.target }} -Doptimize=ReleaseFast -Dname="${EXEC_NAME}"

      - name: Upload Build Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.exe_name }}
          path: zig-out/bin/${{ matrix.os == 'windows-latest' && format('{0}.exe', matrix.exe_name) || matrix.exe_name }}
          if-no-files-found: error

  create_release:
    needs: build
    runs-on: ubuntu-latest
    if: needs.check_changes.outputs.should_run == 'true'
    steps:
      - name: Create artifacts directory
        run: mkdir -p ./artifacts

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          # Remove `merge-multiple: true` unless necessary

      - name: Display structure of downloaded files
        run: |
          echo "Downloaded artifacts:"
          ls -R ./artifacts/

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.check_changes.outputs.nightly_version }}
          name: Nightly Release ${{ needs.check_changes.outputs.nightly_version }}
          artifacts: |
            ./artifacts/fuze-linux-x64
            ./artifacts/fuze-macos-arm64
            ./artifacts/fuze-windows-x64.exe
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: true