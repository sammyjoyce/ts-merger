name: Nightly Release

on:
  schedule:
    - cron: '0 0 * * *'  # Runs every day at 00:00 UTC
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'

permissions:
  contents: write
  packages: write
  actions: write

env:
  GITHUB_REPOSITORY: ${{ github.repository }}
  GITHUB_OWNER: ${{ github.repository_owner }}
  GITHUB_REPO: ${{ github.event.repository.name }}

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for code changes
        id: check
        shell: bash
        run: |
          # Get the latest nightly release tag
          LATEST_NIGHTLY=$(git tag -l "*-nightly.*" | sort -V | tail -n1 || echo "")
          
          if [ -z "$LATEST_NIGHTLY" ] || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # No previous nightly release exists or manual trigger
            echo "No previous nightly release found or manual trigger. Running release."
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            # Check for changes in code files since last nightly
            CHANGES=$(git diff --name-only $LATEST_NIGHTLY...HEAD -- '*.zig' '*.ts' '*.js' '*.py' || echo "")
            
            if [ -n "$CHANGES" ]; then
              echo "Changes detected since last nightly release:"
              echo "$CHANGES"
              echo "should_run=true" >> $GITHUB_OUTPUT
            else
              echo "No code changes since last nightly release."
              echo "should_run=false" >> $GITHUB_OUTPUT
            fi
          fi

  build:
    needs: check_changes
    if: needs.check_changes.outputs.should_run == 'true'
    runs-on: ${{ matrix.os }}
    outputs:
      nightly_version: ${{ steps.version.outputs.nightly_version }}
    strategy:
      matrix:
        include:
          - {os: ubuntu-latest, target: x86_64-linux-gnu, exe_name: fuze-linux-x64}
          - {os: macos-latest, target: aarch64-macos, exe_name: fuze-macos-arm64}
          - {os: windows-latest, target: x86_64-windows-gnu, exe_name: fuze-windows-x64.exe}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Latest Version
        id: version
        shell: bash
        run: |
          # Try to get the latest version from build.zig.zon
          version=$(grep '\.version = ' build.zig.zon | cut -d'"' -f2)
          echo "version=$version" >> $GITHUB_OUTPUT
          
          # Generate nightly version with timestamp
          timestamp=$(date -u +"%Y%m%d")
          echo "nightly_version=${version}-nightly.${timestamp}" >> $GITHUB_OUTPUT

      - name: Build Installation Scripts
        run: python3 .github/scripts/build_scripts.py
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Set Up Git Config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Set up Zig
        uses: mlugg/setup-zig@v1
        with:
          version: master

      - name: Cache tree-sitter dependencies
        id: cache-tree-sitter-dependencies
        uses: actions/cache@v3
        with:
          path: deps/tree-sitter
          key: ${{ matrix.os }}-tree-sitter-${{ hashFiles('deps/tree-sitter/**') }}
          restore-keys: |
            ${{ matrix.os }}-tree-sitter-

      - name: Cache tree-sitter-typescript dependencies
        id: cache-tree-sitter-typescript-dependencies
        uses: actions/cache@v3
        with:
          path: deps/tree-sitter-typescript
          key: ${{ matrix.os }}-tree-sitter-typescript-${{ hashFiles('deps/tree-sitter-typescript/**') }}
          restore-keys: |
            ${{ matrix.os }}-tree-sitter-typescript-

      - name: Clone tree-sitter (Windows)
        if: matrix.os == 'windows-latest' && steps.cache-tree-sitter-dependencies.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Remove-Item -Path "deps/tree-sitter" -Recurse -Force -ErrorAction SilentlyContinue
          git clone --depth 1 --branch v0.20.8 https://github.com/tree-sitter/tree-sitter.git deps/tree-sitter

      - name: Clone tree-sitter (Unix)
        if: matrix.os != 'windows-latest' && steps.cache-tree-sitter-dependencies.outputs.cache-hit != 'true'
        shell: bash
        run: |
          rm -rf deps/tree-sitter
          git clone --depth 1 --branch v0.20.8 https://github.com/tree-sitter/tree-sitter.git deps/tree-sitter

      - name: Clone tree-sitter-typescript (Windows)
        if: matrix.os == 'windows-latest' && steps.cache-tree-sitter-typescript-dependencies.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Remove-Item -Path "deps/tree-sitter-typescript" -Recurse -Force -ErrorAction SilentlyContinue
          git clone --depth 1 --branch v0.20.1 https://github.com/tree-sitter/tree-sitter-typescript.git deps/tree-sitter-typescript

      - name: Clone tree-sitter-typescript (Unix)
        if: matrix.os != 'windows-latest' && steps.cache-tree-sitter-typescript-dependencies.outputs.cache-hit != 'true'
        shell: bash
        run: |
          rm -rf deps/tree-sitter-typescript
          git clone --depth 1 --branch v0.20.1 https://github.com/tree-sitter/tree-sitter-typescript.git deps/tree-sitter-typescript

      - name: Run Tests
        run: zig build test

      - name: Build Release
        run: |
          zig build -Dtarget=${{ matrix.target }} -Doptimize=ReleaseFast -Dname="${{ matrix.exe_name }}"

      - name: List Build Output (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Get-ChildItem -Path "zig-out/bin/" -Force

      - name: List Build Output (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          ls -la zig-out/bin/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.exe_name }}
          path: zig-out/bin/${{ matrix.exe_name }}

  create_release:
    needs: build
    runs-on: ubuntu-latest
    if: needs.check_changes.outputs.should_run == 'true'
    steps:
      - name: Download Linux Artifact
        uses: actions/download-artifact@v3
        with:
          name: fuze-linux-x64
          path: ./artifacts

      - name: Download macOS Artifact
        uses: actions/download-artifact@v3
        with:
          name: fuze-macos-arm64
          path: ./artifacts

      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: fuze-windows-x64.exe
          path: ./artifacts

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.build.outputs.nightly_version }}
          name: Nightly Release ${{ needs.build.outputs.nightly_version }}
          artifacts: "./artifacts/fuze-linux-x64,./artifacts/fuze-macos-arm64,./artifacts/fuze-windows-x64.exe"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: true
